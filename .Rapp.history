save.pkg.list <- installed.packages()[is.na(installed.packages()[ , "Priority"]), 1]
save(save.pkg.list, file="pkglist.Rdata")
load("pkglist.Rdata")#
install.packages(save.pkg.list)
save.pkg.list
typeof(save.pkg.list)
x<-x[-which(x==4)]
save.pkg.list<-save.pkg.list[-which(save.pkg.list=="financial")]
load("pkglist.Rdata")#
install.packages(save.pkg.list)
save.pkg.list<-save.pkg.list[-which(save.pkg.list=="zoo")]
save.pkg.list
save.pkg.list<-save.pkg.list[-which(save.pkg.list=="financial")]
save.pkg.list
load("pkglist.Rdata")#
install.packages(save.pkg.list)
save.pkg.list<-save.pkg.list[-which(save.pkg.list=="financial")]
install.packages(save.pkg.list)
Sys.getenv("PATH")
load("pkglist.Rdata")
save.pkg.list<-save.pkg.list[-which(save.pkg.list=="financial")]
install.packages(save.pkg.list)
library(party)#
library(rpart)#
library(ggplot2)#
library(randomForest)
head(kyphosis)
summary(kyphosis)
length(kyphosis)
require(devtools)
install_github("slidify", "ramnathv")
library(AER)#
library(corrplot)#
library(corrgram)#
library(caret)#
library(randomForest)#
library(klaR)#
library(pROC)#
#
# Replace the path here with the appropriate one for your machine#
myprojectpath = "/Users/eoinbrazil/Desktop/DublinR/TreesAndForests/DublinR-ML-treesandforests/"#
#
# Set the working directory to the current location for the project files#
setwd(myprojectpath)#
#
# Replace the path here with the appropriate one for your machine#
scriptpath = paste(myprojectpath, "scripts/", sep="")#
datapath = paste(myprojectpath, "data/", sep="")#
graphpath = paste(myprojectpath, "graphs/", sep="")#
# Set the seed so comparisons can be later made between the methods#
set.seed(2323)#
#
# Load Affairs data#
data(Affairs)#
#
# Explore the first ten records of the dataset to take a peek#
head(Affairs)#
#
# Look to get a summary of the dataset for each variable in the dataframe#
summary(Affairs)#
#
# Add some additional fields to data to for the correlation analysis#
Affairs$male <- mapvalues(Affairs$gender, from = c("female", "male"), to = c(0, 1))#
Affairs$male <- as.integer(Affairs$male)#
Affairs$male <- sapply(Affairs$male, function(x) x-1)#
Affairs$kids <- mapvalues(Affairs$children, from = c("no", "yes"), to = c(0, 1))#
Affairs$kids <- as.integer(Affairs$kids)#
Affairs$kids <- sapply(Affairs$kids, function(x) x-1)#
#
# Add a field to indicate if there was any affairs#
Affairs$hadaffair[Affairs$affairs< 1] <- 'No'#
Affairs$hadaffair[Affairs$affairs>=1] <- 'Yes'#
Affairs$hadaffair <- as.factor(Affairs$hadaffair)#
table(Affairs$hadaffair)#
#
# Check that the fields are only numerical in the data frame#
sapply(Affairs[, -c(2,5,12)], is.numeric)#
#
# Explore the data set to identify and then we'll remove any moderately correlated variables (could change the correlation value from 0.65 to .9)#
affairs.corr <- cor(Affairs[, -c(2,5,12])#
corrplot(affairs.corr, method = "number", tl.cex = 0.6)#
affairs.variables.corr <- findCorrelation(affairs.corr, 0.65)#
affairs.variables.corr.names <- colnames(affairs.corr[,affairs.variables.corr])#
#
# The dataset requires defined training and test subsets so let's remove some of the variables that don't see to add to the value and create these#
# in processing unwanted we also include the variables quality and color (13,15) as we want to remove these as well#
trainIndices = createDataPartition(Affairs$hadaffair, p = 0.8, list = F)#
#
unwanted = colnames(Affairs) %in% c("yearsmarried", "affairs")#
affairs.df.train = Affairs[trainIndices, !unwanted] #remove affairs and yearsmarried#
affairs.df.test = Affairs[!1:nrow(Affairs) %in% trainIndices, !unwanted]#
table(affairs.df.test$hadaffair)
str(Affairs)
head(Affairs)
affairs.corr
affairs.corr <- cor(Affairs[, -c(2,5,12])
affairs.corr <- cor(Affairs[, -c(2,5,12]))
affairs.corr <- cor(Affairs[, -c(2,5,12)])
affairs.corr
corrplot(affairs.corr, method = "number", tl.cex = 0.6)#
affairs.variables.corr <- findCorrelation(affairs.corr, 0.65)#
affairs.variables.corr.names <- colnames(affairs.corr[,affairs.variables.corr])
affairs.variables.corr
affairs.variables.corr.names
colnames(affairs.corr[,affairs.variables.corr])
affairs.corr
findCorrelation(affairs.corr, 0.65)
affairs.corr[,2]
affairs.corr[2,]
affairs.corr
affairs.corrcolnames(affairs.corr
colnames(affairs.corr)
colnames(affairs.corr)
colnames(affairs.corr)[2]
round(affairs.corr,2)
